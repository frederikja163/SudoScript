using NUnit.Framework;
using StandardLibrary;
using SudoScript.Core;
using SudoScript.Core.Data;
using System.Data;

namespace SudoScript.Core.Test;

internal sealed class SolverTests
{
    public Board CreateEasyBoard()
    {
        Board board = Util.CreateStandardEmpty();
        // Sudoku givens generated by https://sudoku.com/
        board[1, 1].Digit = 1;
        board[4, 1].Digit = 9;
        board[5, 1].Digit = 6;
        board[8, 1].Digit = 4;

        board[2, 2].Digit = 4;
        board[3, 2].Digit = 3;
        board[8, 2].Digit = 2;

        board[5, 3].Digit = 3;
        board[6, 3].Digit = 7;
        board[7, 3].Digit = 1;

        board[2, 4].Digit = 1;
        board[6, 4].Digit = 4;
        board[7, 4].Digit = 7;
        board[8, 4].Digit = 8;

        board[3, 5].Digit = 4;
        board[4, 7].Digit = 2;

        board[3, 6].Digit = 6;
        board[5, 6].Digit = 7;
        board[7, 6].Digit = 4;
        board[8, 6].Digit = 5;

        board[6, 7].Digit = 1;
        board[7, 7].Digit = 8;
        board[8, 7].Digit = 3;
        board[9, 7].Digit = 5;

        board[3, 9].Digit = 1;
        board[2, 8].Digit = 9;
        board[4, 8].Digit = 7;
        board[5, 8].Digit = 4;

        board[5, 9].Digit = 5;
        board[6, 9].Digit = 8;
        board[7, 9].Digit = 9;
        board[8, 9].Digit = 7;

        return board;
    }

    [Test()]
    public void CanSolveEmptySudoku()
    {
        Board board = Util.CreateStandardEmpty();
        Assert.DoesNotThrow(() => board = Solver.Solve(board));
        Assert.IsTrue(board.ValidateRules());
        Assert.IsFalse(board.Cells().Any(c => c.Digit == Cell.EmptyDigit));
    }

    [Test]
    public void CanSolveGeneratedSudoku()
    {
        Board board = CreateEasyBoard();

        Console.WriteLine(board.ToString());

        Console.WriteLine("-------------------------------------------------");
        Assert.DoesNotThrow(() => board = Solver.Solve(board));
        Assert.IsTrue(board.ValidateRules());
        Assert.IsFalse(board.Cells().Any(c => c.Digit == Cell.EmptyDigit));

        Console.WriteLine(board.ToString());
    }

    [Test]
    public void IsSatisfactoryTest()
    {
        Board board = CreateEasyBoard();

        Assert.IsTrue(Solver.IsSatisfactory(board));
    }

    [Test]
    public void IsNotSatisfactoryTest()
    {
        Board board = Util.CreateStandardEmpty();

        Assert.IsFalse(Solver.IsSatisfactory(board));
    }

    [Test]
    public void FindSolutionsTwoUniqueCellsTest()
    {

        Board board = new(new List<Cell>{ new Cell(1, 1), new Cell(1, 2) }, 
            new List<Unit> {
                new Unit(new List<CellReference> { 
                    new CellReference(1, 1), 
                    new CellReference(1,2) }, 
                new List<IRule> { new Unique { } })});

        List<Board>? boardList = Solver.FindSolutions(board);
        List<Board>? randomBoardList = Solver.FindSolutions(board, int.MaxValue, true);

        Assert.IsNotNull(boardList);
        Assert.That(boardList.Count(), Is.EqualTo(72));
        Assert.IsNotNull(randomBoardList);
        Assert.That(boardList.Count(), Is.EqualTo(randomBoardList.Count()));
    }

    [Test]
    public void FindNumberOfSolutionsTest()
    {
        Board board = new(new List<Cell> { new Cell(1, 1), new Cell(1, 2) },
            new List<Unit> {
                new Unit(new List<CellReference> {
                    new CellReference(1, 1),
                    new CellReference(1,2) },
                new List<IRule> { new Unique { } })});

        List<Board>? boardList = Solver.FindSolutions(board, 25);

        Assert.IsNotNull(boardList);
        Assert.That(boardList.Count(), Is.EqualTo(25));
    }
}
