using NUnit.Framework;
using SudoScript;
using SudoScript.Data;

namespace Tests;

internal sealed class SolverTests
{
    [Test()]
    public void CanSolveEmptySudoku()
    {
        Board board = Util.CreateStandardEmpty();
        Assert.DoesNotThrow(() => board = Solver.Solve(board, false));
        Assert.IsTrue(board.ValidateRules());
        Assert.IsFalse(board.Cells().Any(c => c.Digit == Cell.EmptyDigit));
    }

    [Test]
    public void CanSolveGeneratedSudoku()
    {
        Board board = Util.CreateStandardEmpty();
        // Sudoku givens generated by https://sudoku.com/
        board[1, 1].Digit = 1;
        board[4, 1].Digit = 9;
        board[5, 1].Digit = 6;
        board[8, 1].Digit = 4;

        board[2, 2].Digit = 4;
        board[3, 2].Digit = 3;
        board[8, 2].Digit = 2;

        board[5, 3].Digit = 3;
        board[6, 3].Digit = 7;
        board[7, 3].Digit = 1;

        board[2, 4].Digit = 1;
        board[6, 4].Digit = 4;
        board[7, 4].Digit = 7;
        board[8, 4].Digit = 8;

        board[3, 5].Digit = 4;

        board[3, 6].Digit = 6;
        board[5, 6].Digit = 7;
        board[7, 6].Digit = 4;
        board[8, 6].Digit = 5;

        board[6, 7].Digit = 1;
        board[7, 7].Digit = 8;
        board[8, 7].Digit = 3;
        board[9, 7].Digit = 5;

        board[2, 8].Digit = 9;
        board[4, 8].Digit = 7;
        board[5, 8].Digit = 4;

        board[5, 9].Digit = 5;
        board[6, 9].Digit = 8;
        board[7, 9].Digit = 9;
        board[8, 9].Digit = 7;
        Assert.DoesNotThrow(() => board = Solver.Solve(board, true));
        Assert.IsTrue(board.ValidateRules());
        Assert.IsFalse(board.Cells().Any(c => c.Digit == Cell.EmptyDigit));
    }
}
